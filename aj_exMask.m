function exMask_paths = aj_exMask(TC_paths, pth_out)
%--------------------------------------------------------------------------
% This function creates individual explicit masks for various tissue types 
% (e.g. GM, WM, CSF, etc.) based on (smoothed) tissue class (TC) images.
% The masks are generated by comparing the voxel intensity values across 
% all available tissue images and applying a threshold condition to 
% identify dominant regions. The generated masks are saved as NIfTI files.
%
% INPUTS
% TC_paths:     A {nsub x nTC} cells array where nsub is the subjects 
%               number and nTC, the tissue classes number containing the 
%               subject-specific (smoothed) tissue probabilities paths in 
%               each cell.
% pth_out:      (optional) Output path to save the explicit masks. By
%               default, pth_out = full path of the first tissue 
%               probabilities map of the first subject.
%
% OUTPUT
% exMask_paths: A cell containing the explicit tissue-specific binary mask
%               paths of the saved NIfTI files for each tissue type 
%               (e.g. exMask_paths(1,:), exMask_paths(2,:)). Each binay 3D
%               mask is dominant over the others and meets the threshold
%               condition (> 0.2).
%
% PROCESS
% 1. Validates `TC_paths` input and checks the number of subjects.
% 2. Collects tissue probability paths for each tissue type across subjects.
% 3. Averages the tissue probability maps across subjects if more than one.
% 4. Reads the averaged (or single subject) volumes.
% 5. Creates explicit masks by comparing voxel values across tissue types 
%    and applying threshold conditions.
% 6. Writes the generated masks as NIfTI files.
%
% LIMITATIONS
% - Handles multiple tissue types, assumes valid (smoothed) input images.
% - Requires SPM functions.
% - Defines the output path and the number of tissue classes (nTC) on the
% first cell/subject.
%
% REFERENCE
% Draganski et al, 2011, doi:10.1016/j.neuroimage.2011.01.052
%--------------------------------------------------------------------------
% Copyright (C) 2017 Cyclotron Research Centre
% Written by A.J.
% Cyclotron Research Centre, University of Liege, Belgium
%--------------------------------------------------------------------------

%% Dealing with inputs
if nargin < 1
    error('aj_exMask ISSUE: not enough inputs.\n');
end

if ~iscell(TC_paths)
    error('aj_exMask ISSUE: input is not a cell or a cell array.');
else
    nsub = size(TC_paths,1);
    fprintf('aj_exMask: %d detected subject(s).\n', nsub);
    if nsub == 1
        need2avg = 0;
    elseif nsub > 1
        need2avg = 1;
    else
        error('aj_exMask ISSUE: wrong subjects number');
    end
    
    nTC = size(TC_paths,2);
    fprintf('aj_exMask: %d detected tissue classes.\n', nTC);
    if nTC < 2
        error('aj_exMask ISSUE: not enough tissue classes to apply the "majority and above than 0.2" criteria.');
    end
end

if nargin < 2
    pth_out = spm_file(TC_paths{1}{1}, 'fpath');
    fprintf('aj_exMask: output path defined by default = %s \n', pth_out);
else
    fprintf('aj_exMask: output path = %s \n', pth_out);
end

if need2avg
    % Reorganize data per tissue class rather than per subject
    orgTC_paths = cell(nTC, nsub);
    for i = 1:nsub
        for ii = 1:nTC
            orgTC_paths{ii,i} = TC_paths{i,ii};
        end
    end

    % Average a set of ith TC images to produce one ith TC mean image
    TC = cell(1, nTC);
    for i = 1:nTC
        spm_mean(orgTC_paths{i}); % resulted mean file is written as type int16 to "mean.img"
        avg_path = spm_file(pwd, '^mean*');
        TC{i} = spm_read_vols(spm_vol(avg_path));
        delete(avg_path); % to avoid overwrite at each new iteration + clean environment
    end
else
    % case: one subject
    TC = cell(1, nTC);
    for i = 1:nTC
        disp(char(TC_paths{i}));
        TC{i} = spm_read_vols(spm_vol(char(TC_paths{i})));
    end
end

%% Create individual explicit masks based on majority and thresholding
exmask = cell(1, nTC);
for i = 1:nTC
    % Create mask for each tissue type
    mask_condition = TC{i} > 0.2; % Initial threshold condition
    for j = 1:nTC
        if i ~= j % Compare current tissue type with others
            mask_condition = mask_condition & (TC{i} > TC{j});
        end
    end
    exmask{i} = mask_condition;
end

%% Write NIfTI files for each mask
exMask_paths = cell(1, nTC);
for i = 1:nTC
    exMask_info = spm_vol(TC_paths{i}); % Use original info for output header
    exMask_info.fname = spm_file(exMask_info.fname,'prefix','Mask_','path',pth_out);
    spm_write_vol(exMask_info, exmask{i});
    exMask_paths{i} = exMask_info.fname;
end

fprintf('aj_exMask: DONE.\n');
end
